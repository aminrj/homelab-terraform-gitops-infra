apiVersion: batch/v1
kind: Job
metadata:
  name: threat-intel-bootstrap
  annotations:
    argocd.argoproj.io/sync-wave: "1"
spec:
  backoffLimit: 1
  ttlSecondsAfterFinished: 86400
  template:
    spec:
      restartPolicy: Never
      containers:
        - name: create-database
          image: ghcr.io/cloudnative-pg/postgresql:16.6
          imagePullPolicy: IfNotPresent
          env:
            - name: PGHOST
              valueFrom:
                configMapKeyRef:
                  name: threat-intel-app-config
                  key: DB_HOST
            - name: PGPORT
              valueFrom:
                configMapKeyRef:
                  name: threat-intel-app-config
                  key: DB_PORT
            - name: PGDATABASE
              value: postgres
            - name: PGUSER
              valueFrom:
                secretKeyRef:
                  name: threat-intel-superuser
                  key: username
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: threat-intel-superuser
                  key: password
            - name: APP_DB
              valueFrom:
                secretKeyRef:
                  name: threat-intel-db-creds
                  key: database
            - name: APP_USER
              valueFrom:
                secretKeyRef:
                  name: threat-intel-db-creds
                  key: username
            - name: APP_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: threat-intel-db-creds
                  key: password
          command:
            - /bin/sh
            - -c
            - |
              set -euo pipefail
              export PGPASSWORD="$PGPASSWORD"
              echo "Ensuring role ${APP_USER} exists..."
              psql --set=app_user="${APP_USER}" --set=app_password="${APP_PASSWORD}" --set=app_db="${APP_DB}" <<'SQL'
              DO $$
              BEGIN
                IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname = :'app_user') THEN
                  EXECUTE format('CREATE ROLE %I LOGIN PASSWORD %L', :'app_user', :'app_password');
                ELSE
                  EXECUTE format('ALTER ROLE %I WITH LOGIN PASSWORD %L', :'app_user', :'app_password');
                END IF;
              END;
              $$;
              SQL
              echo "Ensuring database ${APP_DB} exists..."
              psql --set=app_user="${APP_USER}" --set=app_db="${APP_DB}" <<'SQL'
              DO $$
              BEGIN
                IF NOT EXISTS (SELECT 1 FROM pg_database WHERE datname = :'app_db') THEN
                  EXECUTE format('CREATE DATABASE %I OWNER %I', :'app_db', :'app_user');
                END IF;
              END;
              $$;
              SQL
              echo "Granting privileges on database ${APP_DB}..."
              psql --set=app_user="${APP_USER}" --set=app_db="${APP_DB}" <<'SQL'
              DO $$
              BEGIN
                EXECUTE format('GRANT ALL PRIVILEGES ON DATABASE %I TO %I', :'app_db', :'app_user');
              END;
              $$;
              SQL
              echo "Threat intel database bootstrap completed."
