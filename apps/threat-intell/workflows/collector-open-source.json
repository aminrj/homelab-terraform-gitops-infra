[
  {
    "name": "Threat Intel Collector",
    "active": false,
    "nodes": [
      {
        "name": "Manual Trigger",
        "type": "n8n-nodes-base.manualTrigger",
        "typeVersion": 1,
        "position": [
          200,
          200
        ],
        "parameters": {}
      },
      {
        "name": "Feed Sources",
        "type": "n8n-nodes-base.function",
        "typeVersion": 1,
        "position": [
          400,
          200
        ],
        "parameters": {
          "functionCode": "const feeds = [\n  { source: \"CISA KEV\", url: \"https://www.cisa.gov/sites/default/files/feeds/known_exploited_vulnerabilities.json\", format: \"json\" },\n  { source: \"AlienVault OTX\", url: \"https://otx.alienvault.com/api/v1/pulses/subscribed\", format: \"json\" },\n  { source: \"CERT-EU\", url: \"https://cert.europa.eu/api/v1/feeds/alerts\", format: \"json\" }\n];\nreturn feeds.map(feed => ({ json: feed }));"
        }
      },
      {
        "name": "Split Sources",
        "type": "n8n-nodes-base.splitInBatches",
        "typeVersion": 1,
        "position": [
          600,
          200
        ],
        "parameters": {
          "batchSize": 1
        }
      },
      {
        "name": "Fetch Feed",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 3,
        "position": [
          800,
          200
        ],
        "parameters": {
          "url": "={{$json[\"url\"]}}",
          "method": "GET",
          "responseFormat": "json",
          "ignoreResponseCode": true,
          "options": {
            "timeout": 30000
          }
        }
      },
      {
        "name": "Normalize Entries",
        "type": "n8n-nodes-base.function",
        "typeVersion": 1,
        "position": [
          1000,
          200
        ],
        "parameters": {
          "functionCode": "const crypto = require('crypto');\nconst source = $json[\"source\"];\nconst format = $json[\"format\"];\nconst payload = items[0].json;\nlet entries = [];\n\nif (typeof payload === \"string\") {\n  entries = JSON.parse(payload);\n} else if (Array.isArray(payload)) {\n  entries = payload;\n} else if (Array.isArray(payload.results)) {\n  entries = payload.results;\n} else if (Array.isArray(payload.vulnerabilities)) {\n  entries = payload.vulnerabilities;\n} else if (Array.isArray(payload.data)) {\n  entries = payload.data;\n} else {\n  entries = [payload];\n}\n\nreturn entries.map(entry => {\n  const title = entry.title || entry.name || entry.id || entry.cveID;\n  const url = entry.link || entry.url || entry.source || entry.referencedUrl || entry.external_url;\n  const body = entry.summary || entry.description || entry.content || entry.raw_description || JSON.stringify(entry);\n  const hash = crypto.createHash('sha256').update(body).digest('hex');\n  return {\n    json: {\n      source,\n      title,\n      url,\n      raw_text: body,\n      content_hash: hash\n    }\n  };\n});"
        }
      },
      {
        "name": "Insert Raw Docs",
        "type": "n8n-nodes-base.postgres",
        "typeVersion": 1,
        "position": [
          1200,
          200
        ],
        "parameters": {
          "operation": "executeQuery",
          "query": "INSERT INTO threatintel.raw_doc (source, url, title, raw_text, content_hash)\nVALUES (:={{$json.source}}, :={{$json.url}}, :={{$json.title}}, :={{$json.raw_text}}, :={{$json.content_hash}})\nON CONFLICT (content_hash) DO UPDATE SET collected_at = NOW();"
        },
        "credentials": {
          "postgres": {
            "id": "2",
            "name": "threat-intel-db"
          }
        }
      },
      {
        "name": "Emit Metric",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 3,
        "position": [
          1400,
          200
        ],
        "parameters": {
          "url": "http://threat-intel-metrics.threat-intel.svc.cluster.local:9101/collector",
          "method": "POST",
          "jsonParameters": true,
          "sendBody": true,
          "options": {
            "timeout": 5000
          },
          "bodyParametersJson": "{\"source\":\"{{$json.source}}\",\"status\":\"success\"}"
        }
      }
    ],
    "connections": {
      "Feed Sources": {
        "main": [
          [
            {
              "node": "Split Sources",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Split Sources": {
        "main": [
          [
            {
              "node": "Fetch Feed",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Split Sources",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Fetch Feed": {
        "main": [
          [
            {
              "node": "Normalize Entries",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Normalize Entries": {
        "main": [
          [
            {
              "node": "Insert Raw Docs",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Insert Raw Docs": {
        "main": [
          [
            {
              "node": "Emit Metric",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Manual Trigger": {
        "main": [
          [
            {
              "node": "Feed Sources",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "settings": {
      "executionOrder": "v1"
    },
    "id": null,
    "tags": []
  }
]